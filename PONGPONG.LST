C51 COMPILER V9.55   PONGPONG                                                              04/16/2018 15:17:33 PAGE 1   


C51 COMPILER V9.55, COMPILATION OF MODULE PONGPONG
OBJECT MODULE PLACED IN PONGPONG.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\c51.exe PONGPONG.c DB OE BR INCDIR(C:\SiLabs\MCU\Inc)

line level    source

   1          #include <C8051F020.h>
   2          #include <lcd.h>
   3          #define H_PONG_DRIVER
   4          
   5          
   6          unsigned int pot, pot2;
   7          sbit BTN1 = P2^2;
   8          
   9          
  10          unsigned char put_char (unsigned char row, unsigned char col, char ch);
  11          void init_game();
  12          void init_text();
  13          void get_pot();
  14          void move_paddle(unsigned int paddle1, unsigned int paddle2);
  15          
  16          
  17          void main(void)
  18          {
  19   1      
  20   1      //===========================================================================
  21   1      //Init
  22   1      //===========================================================================
  23   1      
  24   1      
  25   1              WDTCN = 0xde;  // disable watchdog
  26   1          WDTCN = 0xad;
  27   1          XBR2 = 0x40;   // enable port output
  28   1          XBR0 = 4;      // enable uart 0
  29   1              REF0CN = 7;
  30   1              OSCXCN = 0x67; // turn on external crystal
  31   1              TMOD = 0x20;   // wait 1ms using T1 mode 2
  32   1              TH1 = -167;    // 2MHz clock, 167 counts - 1ms
  33   1              TR1 = 1;
  34   1              while ( TF1 == 0 ) { }          // wait 1ms
  35   1              while ( !(OSCXCN & 0x80) ) { }  // wait till oscillator stable
  36   1              OSCICN = 8;    // switch over to 22.1184MHz
  37   1      
  38   1      
  39   1              T2CON  =  0x08; //Set the timer auto-reload   
  40   1              RCAP2H = -180 ; //22.1184E6/12/1024 = 1800
  41   1              RCAP2L = 3;
  42   1              TR2    =  1;
  43   1              //IE     =  0x80; //0x80; //do not enable timer 2 interrupt
  44   1              EIE2   =  0x02; //enable ADC interrupt
  45   1              ADC0CF =  0x40; //set conversion clock [(22.184Hz/2.5MHz) - 1] = 8
  46   1              ADC0CN =  0x8C; //enable ADC, starts conversion when T2 overfows
  47   1              REF0CN =  0x07; //set reference voltage
  48   1              AMX0SL =  0x01; 
  49   1      
  50   1      
  51   1      
  52   1              
  53   1      //initializing game
  54   1      //-------------------------------------------------------------------------------
  55   1              init_lcd();
C51 COMPILER V9.55   PONGPONG                                                              04/16/2018 15:17:33 PAGE 2   

  56   1              init_text(); //waits for start to continue
  57   1      
  58   1      
  59   1              while(1) {
  60   2                      get_pot();
  61   2                      move_paddle(pot, pot2);
  62   2                      refresh_screen();
  63   2              }
  64   1      }
  65          
  66                  
  67          //==============================================================================
  68          //put_char
  69          //inserts characters
  70          //==============================================================================
  71                  unsigned char put_char (unsigned char row, unsigned char col, char ch)
  72                  {
  73   1                              int loc = row * 128 + col;
  74   1                              int font = (ch - ' ') * 5;
  75   1                              char i;
  76   1                              for (i=0; i<5; i++)
  77   1                              {
  78   2                                      screen[loc +i] = font5x8[font+i];
  79   2                              }
  80   1                              return (0);
  81   1              }
  82          
  83          
  84          
  85          //============================================================================
  86          //init_game
  87          //inits the game (bounds, net,
  88          //============================================================================
  89                  void init_game ()
  90                  {
  91   1                      unsigned int i;
  92   1                                      //TOP BOUNDARY
  93   1                                      for(i=0; i<127; i++) {
  94   2                                              screen[i] = 0x0C; 
  95   2                                      }
  96   1                                      //BOTTOM BOUNDARY
  97   1                                      for(i=0; i<127; i++) {
  98   2                                              screen[896+i] = 0xC0; 
  99   2                                      }
 100   1                                      //NET
 101   1                                      for(i=63; i<960; i++) {
 102   2                                              screen[i+1] = 0xCC;
 103   2                                              screen[i] = 0xCC; 
 104   2                                              i= i+127;
 105   2                                      }
 106   1              }
 107          
 108          
 109          
 110          
 111          
 112          //============================================================================
 113          //init_text
 114          //inits the text HELLO PRESS START TO PLAY!
 115          //============================================================================
 116          void init_text(void) {
 117   1      
C51 COMPILER V9.55   PONGPONG                                                              04/16/2018 15:17:33 PAGE 3   

 118   1                      put_char(1,0, 'H'); put_char(1,6, 'E'); put_char(1,12,'L');     put_char(1,18,'L'); //displays HELLO
 119   1                      put_char(1,24,'O'); put_char(1,32,' ');
 120   1      
 121   1                      put_char(1,38,'P'); put_char(1,44,'R'); put_char(1,50,'E'); put_char(1,56,'S'); //displays PRESS
 122   1                      put_char(1,62,'S'); put_char(1,68,' '); 
 123   1              
 124   1                      put_char(1,74,'S'); put_char(1,80,'T'); put_char(1,84,'A'); put_char(1,90,'R'); //displays START TO
 125   1                      put_char(1,96,'T'); put_char(1,102,' '); put_char(1,108,'T'); put_char(1,114,'O'); 
 126   1      
 127   1                      put_char(3,52, 'P'); put_char(3,58, 'L'); put_char(3,64, 'A'); put_char(3,70, 'Y'); //PLAY!
 128   1                      put_char(3,76,'!');     put_char(6,30,' ');     put_char(6,36,' '); put_char(6,42,' ');
 129   1      
 130   1                      refresh_screen();
 131   1                      while(BTN1) {
 132   2      
 133   2                      }
 134   1                      blank_screen();
 135   1      
 136   1      }
 137          
 138          
 139          
 140          
 141          //============================================================================
 142          //move_paddle
 143          //moves the paddles
 144          //============================================================================
 145                  void get_pot() {
 146   1      
 147   1                              AMX0SL = 0x00;
 148   1                              ADC0CF = 0x41;
 149   1                              AD0BUSY = 1;
 150   1                              while (AD0BUSY)
 151   1                              {}
 152   1      
 153   1                              pot = ADC0H/2;  //*4 to be 64
 154   1      
 155   1      
 156   1                              AMX0SL = 0x00;
 157   1                              ADC0CF = 0x41;
 158   1                              AD0BUSY = 1;
 159   1                              while (AD0BUSY)
 160   1                              {}
 161   1      
 162   1                              pot2 = ADC0H/2; //*4 to be 64
 163   1                      
 164   1                              
 165   1                              
 166   1              }
 167          
 168          
 169          
 170          
 171                  void move_paddle (unsigned int paddle1, unsigned int paddle2)
 172                  {                       
 173   1                                      blank_screen();
 174   1                                      init_game();
 175   1                                      screen[paddle1*128] = 0xFF;
 176   1                                      screen[(paddle1*128)+1] = 0xFF;
 177   1      
 178   1                                      screen[paddle2*127] = 0xFF;
 179   1                                      screen[(paddle2*127)+1] = 0xFF;
C51 COMPILER V9.55   PONGPONG                                                              04/16/2018 15:17:33 PAGE 4   

 180   1                                      
 181   1              
 182   1      
 183   1              }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    662    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
